name: EC2 auto deploy
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # BranchをCheckout
      - name: Checkout code
        uses: actions/Checkout@v4

      # IP取得ライブラリをインストール
      - name: Public IP Install
        id: ip
        uses: haythem/public-ip@v1.3

      # AWS CLIをインストールする
      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # AWS CLIにキーを設定をする
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # デプロイする
      - name: SSHのセキュリティグループを開放する
        run: |
          # SSHのセキュリティグループを開放する

          # 既存のルールを確認
          existing_rule=$(aws ec2 describe-security-groups --group-ids ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --query "SecurityGroups[0].IpPermissions[?FromPort==\`22\`].IpRanges[?CidrIp==\`${{ steps.ip.outputs.ipv4 }}/32\`] | [0][0]" \
            --output text)
          if [ "$existing_rule" = "None" ]; then
            echo "ルールが存在しません。新たに追加します。"
            aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          else
            echo "ルールはすでに存在します。処理をスキップします。"
          fi
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: SSH接続して、git pullとgit buildする
        run: |
          ssh -oStrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} -i private_key "cd /home/ec2-user/ec2-deploy-test && git fetch --prune && git checkout main && git pull origin main && npm install && npm run build"

      - name: SSHのセキュリティグループを閉じる
        run: |
          # SSHのセキュリティグループを閉じる
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
